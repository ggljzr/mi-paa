\documentclass[11pt]{article}
\usepackage[utf8]{inputenc} % LaTeX source encoded as UTF-8
\usepackage[czech]{babel}

\usepackage{graphicx} %graphics files inclusion
\usepackage{amsmath} %advanced maths
\usepackage{amssymb} %additional math symbols
\usepackage{amsfonts}
\usepackage{listings}
\usepackage{hyperref}
\usepackage{color}
\usepackage{graphicx}

\lstset{
	inputencoding=utf8,
	keywords={else, end,if,for,in,sort, return, and, then, while, loop},
	keywordstyle=\color{black}\bfseries\em,
}

\begin{document}

\title{5. úloha -- Řešení problému vážené splnitelnosti booleovské formule pokročilou iterativní metodou}
\author{Ondřej Červenka}
\date{\today}
\maketitle

\section{Specifikace úlohy}

Je dána booleovská formule $F$ s proměnnými $\{x_1, x_2, \cdots, x_n\}$, v konjuktivní normální formě. Dále je každé proměnné $x_i$, $i \in \{1,\cdots, n\}$ přidělena váha $w_i$.

Hledáme takové ohodnocení proměnných $\{y_1, y_2, \cdots, y_n\}$, $y_i \in \{0,1\} $ pro které bude formule $F$ splněna a součet vah proměnných ohodnocených jedničkou bude maximální.

V této úloze budeme řešit variantu 3SAT, kdy jedna klauzule obsahuje právě 3 literály. Formule tedy mají tvar:

$$
(a_1 \vee b_1 \vee c_1) \wedge (a_2 \vee b_2 \vee c_2) \wedge \cdots
$$

\section{Simulované ochlazování}

Jako pokročilou iterativní metodu jsem zvolil simulované ochlazování. Při tomto algoritmu nevolíme vždy momentálně nelepší tah (jako například u greedy heuristiky), ale náhodně zvolený tah\footnote{V našem případě tah představuje přidání či odebrání věci z batohu.}. Pokud tento tah vylepší dosud nalezené řešení, je proveden. Pokud ne, je proveden pouze s nějakou pravděpodobností $p$.

Tato pravděpodobnost závisí jednak na kvalitě tahu (jak moc zhorší dosud nalezené řešení) a jednak na paramteru $T$ (teplota). Jako $T$ je zvolena nějaká počáteční hodnota, která se postupně snižuje (chladnutí), podle zvoleného parametru. Vyšší teplota pak zvyšuje pravděpodobnost provedení nezlepšujícího tahu.

Díky tomu, že algoritmus dovoluje s nějakou pravděpodobností provést i zhoršující kroky, je možné se dostat z lokálního maxima a nalézt lepší řešení.\cite{aibook}

\subsection{Kostra algoritmu}
\label{sec:kostra}

Kostra algoritmu je stejná jako v případě problému batohu, jediný rozdíl je v cenové funkci. U problému batohu cenová funkce vracela součet cen předmětů obsažených v dané konfiguraci a v případě přetížení batohu 0. 

Při SAT problému cenová funkce vrací součet vah proměnných, které jsou v dané konfiguraci ohodnocney jedinčkou a 0 v případě, že pro toto ohodnocení není formule splněna.  \cite{aibook}:

\begin{lstlisting}[mathescape]
//zacneme z nahodneho stavu
current = get_random_state()
$T$ = $T_i$ //pocatecni teplota
loop
	//chladnuti podle zvoleneho koeficientu
	$T$ = $T$ * cooling

	//pokud doslo k zamrznuti, vrat reseni
	if $T$ < frozen then
		return current

	//zvol nahodneho souseda stavu
	next = get_random_neighbour(current)
	
	//rozdil ceny stavu
	$E\Delta$ = next.value - current.value

	//hodnota stavu next je lepsi 
	if $E\Delta$ > 0 then
		current = next
	
	//pokud je $E\Delta$ < 0, tah se provede
	//s pravdepbodonosti $e^{E\Delta / T}$
	else
		if $p(e^{E\Delta/T})$ then
			current = next
end loop
\end{lstlisting}

Jako parametry heuristiky je tedy třeba zvolit počáteční teplotu $T_i$, dále koeficient chladutí $cooling < 1$ a bod zamrznutí $frozen$. Nastavení těchto parametrů nám ovlivní jak dobu běhu, tak přesnost heuristiky.

Algoritmus je randomizovaný, výsledky jednotlivých běhů se tedy pro stejné instance a paramtery mohou lišit.

\section{Měření}

Vzhledem k tomu, že v tomto případě nemáme k dispozici předpočítané výsledky, je pro zkoumání chyby heuristiky nutné využít nějaký exaktní algoritmus. Ten nám pravděpodobně nedovolí spočítat příliš velké (ve smyslu počtu proměnných) instance, ale umožní nám lépe prozkoumat chování heuristiky na menších instancích.

Na malých instancích se tedy pokusíme nalézt takové nastavení heuristiky, které dává co nejlepší výsledky (nejmenší relativní chybu oproti optimálnímu řešení). Toto nastavení pak použijeme při počítání větších instancí, a budu sledovat změnu v kvalitně řešení při změne parametrů heuristiky.

Na větších instancích také budeme zkoumat dobu běhu algoritmu a to jak je ovlivněna nastavením parametrů heuristiky a poměrem proměnných a klauzulí.

\subsection{Podmínky měření}

Algoritmus byl implementován v C a kompilován pomocí gcc 5.3.1. Při kompilaci nebyly použity žádné optimalizační přepínače. Program byl zkompilován a spouštěn na operačním systému GNU/Linux (Fedora) 64bit s verzí jádra 4.2.8. Procesor počítače je Intel Core i7-4510U s frekvencí 3.1 GHz.

\subsection{Volba instancí}

Na obtížnost instance má kromě počtu proměnných vliv také jejich poměr k počtu klauzulí\cite{selman}. Tento vliv můžeme vidět na obrázku \ref{fig:att}. Našim cílem je, aby algoritmus uspokojivě řešil co nejšiřší třídu instancí.

Menší instance, které budeme zároveň počítat exaktním algoritmem, budou mít 18 - 25 proměnných. Větší instance budou mít 50 - 100 proměnných.   

\begin{figure}[h!]
	\centering
	\includegraphics[width=0.8\textwidth]{att.png}
	\caption{Vliv poměru klauzulí a proměnných na obtížnost instance\cite{selman}}
	\label{fig:att}
\end{figure}


\subsection{Zkoumání relativní chyby heuristiky}

\subsubsection{Počáteční nastavení parametrů heuristiky a instancí}

Na začátku testování jsem vyzkoušel několik náhodně generovaných instancí, abych odhadl vhodné počáteční nastavení parametrů. Ukázalo se, že podle očekávání má na kvalitu výsledku největší vliv rychlost ochlazování. Počáteční parametry heuristiky jsem tedy zvolil takto:

\begin{table}[h!]
	\centering
	\begin{tabular}{| l | c | }
	\hline
	Počáteční teplota & 80  \\ \hline
	Rychlost ochlazování & 0.999  \\ \hline
        Bod zamrznutí & 0.01  \\
	\hline
	\end{tabular}
	\caption{Počáteční nastavení heuristiky}
	\label{tab:params1}
\end{table}

Pro tyto parametry se ukázalo, že již v instancích s poměrem klauzule/proměnné $3.1818$ má heuristika problém nalézt alespoň nějaké řešení. Zvolil jsem tedy následující parametry instancí:

\bgroup
\def\arraystretch{1.2}
\begin{table}[h!]
	\centering
	\begin{tabular}{| l | c | }
	\hline
	Počet proměnných & 22  \\ \hline
	Počet klauzulí & 50  \\ \hline
	Poměr & $2.\overline{27}$ \\
	\hline
	\end{tabular}
	\caption{Počáteční nastavení parametrů instancí}
	\label{tab:params2}
\end{table}
\egroup

\subsubsection{Měření relativní chyby}

Nyní tedy budeme zkoumat, jak se bude vyvýjet relativní chyba heuristiky v závisloti na zvolených parametrech. Nejprve prozkoumáme vliv rychlosti ochlazování při počítání instancí s parametry popsanými v tabulce \ref{tab:params2}. 

Poté zkusíme zvýšit poměr klauzulí a proměnných a uvidíme, pro jaké instance nalezneme alespoň nějaké řešení v rozumném čase (tedy rychleji než exaktní algoritmus).

\bibliographystyle{csn690}
\bibliography{mybibliographyfile}

\end{document}
